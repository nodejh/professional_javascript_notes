# 第四章 变量、作用域和内存问题

## 4.1 基本类型和引用类型

ESMAScript 变量包含两种不同类型的值：

+ 基本类型（5种） Undefin、Null、Boolean、Number、String。基本类型按值访问，可操作实际值。
+ 引用类型，按引用访问。引用类型的值是保存在内存中的对象。JS 不能直接操作对象的内存空间。

> 其他很对语言字符串是以对象形式表示，而 JS 不是。

### 4.1.1 动态的属性

可以给引用类型增加属性，不能给基本类型增加属性。

```
// 给引用类型添加属性
var name = new Object();
name.age = 20;
alert(name.age);


// 给基本类型增加属性不会报错，
// 但访问的时候是 undefined
var name = 'nodejh';
name.age = 20;
alert(name.age); // undefined
```

### 4.1.2 复制变量值

+ 基本类型复制，会在变量对象上创建一个新值。然后把该值复制到新变量分配的位置上。
+ 引用类型复制，会创建一个新的变量，变量的值是一个指针，只想存储在堆内存中的变量。两个变量引用同一个对象。

```
var num1 = 5;
var num2 = num1;


复制前的变量对象
|---------------------------|
|      |                    |
|---------------------------|
|      |                    |
|---------------------------|
| num1 |  5 (Number 类型)    |
|---------------------------|


复制后的变量对象
|---------------------------|
|      |                    |
|---------------------------|
| num2 | 5 (Number 类型)     |
|---------------------------|
| num1 |  5 (Number 类型)    |
|---------------------------|

```

```
var obj1 = new Object();
var obj2 = obj1;
obj1.name = 'nodejh';
alert(obj2.name); // nodejh


复制前的变量对象
|---------------------------|
|      |                    |
|---------------------------|
|      |                    |
|---------------------------|       |-----------------------|
| obj1 |  (Object 类型)     |------| |                       |
|---------------------------|     | |     |---------|       |
                                  |-|----->| object |       |
                                    |     |         |       |
复制后的变量对象                    |------->|------|^-|       |
|---------------------------|     |  |            |          |
|      |                    |     |  |            |          |
|---------------------------|     |  |------------|----------|
| obj2 | (Object 类型)      |------|               |
|---------------------------|                     |
| obj1 | (Object 类型)      |----------------------|
|---------------------------|

```

### 4.1.3 传递参数

ECMAScript 中所有函数的参数都是按值传递的。

+ 传递基本类型的参数，被传递的值复制给 arguments 对象的一个元素。
+ 传递引用类型的参数，会把值的内存地址复制给 arguments。

```
function addTen(num) {
  num += 10;
  return num;
}

var count = 20;
var result = addTen(count);
alert(count); // 20，没有变化
alert(result); // 30
```

```
function setName(obj) {
  obj.name = 'nodejh';
}

var person = new Object();
setName(person);
alert(person.name); // nodejh
```

```
function setName(obj) {
  obj.name = 'nodejh';
  obj = new Object();
  obj.name = 'jh';
}

var person = new Object();
setName(person);
alert(person.name); // nodejh
```
